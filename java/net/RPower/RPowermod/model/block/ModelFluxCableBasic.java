// Date: 21/08/2014 12:12:24
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package net.RPower.RPowermod.model.block;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelFluxCableBasic extends ModelBase
{
  //fields
    ModelRenderer fFaceR;
    ModelRenderer fFaceU;
    ModelRenderer fFaceD;
    ModelRenderer fFaceL;
    ModelRenderer lFaceB;
    ModelRenderer lFaceU;
    ModelRenderer lFaceD;
    ModelRenderer lFaceF;
    ModelRenderer rFaceB;
    ModelRenderer rFaceU;
    ModelRenderer rFaceD;
    ModelRenderer rFaceF;
    ModelRenderer coreR;
    ModelRenderer coreF;
    ModelRenderer coreL;
    ModelRenderer coreD;
    ModelRenderer coreB;
    ModelRenderer coreU;
    ModelRenderer dFaceB;
    ModelRenderer dFaceL;
    ModelRenderer dFaceR;
    ModelRenderer dFaceF;
    ModelRenderer uFaceB;
    ModelRenderer uFaceL;
    ModelRenderer uFaceR;
    ModelRenderer uFaceF;
    ModelRenderer bFaceR;
    ModelRenderer bFaceU;
    ModelRenderer bFaceD;
    ModelRenderer bFaceL;
  
  public ModelFluxCableBasic()
  {
    textureWidth = 16;
    textureHeight = 16;
    
      fFaceR = new ModelRenderer(this, -6, 0);
      fFaceR.addBox(0F, 0F, 0F, 6, 3, 0);
      fFaceR.setRotationPoint(-2F, 16F, -8F);
      fFaceR.setTextureSize(16, 16);
      fFaceR.mirror = true;
      setRotation(fFaceR, -2.356194F, -1.570796F, 0F);
      fFaceU = new ModelRenderer(this, -6, 0);
      fFaceU.addBox(0F, 0F, 0F, 6, 3, 0);
      fFaceU.setRotationPoint(2F, 16F, -8F);
      fFaceU.setTextureSize(16, 16);
      fFaceU.mirror = true;
      setRotation(fFaceU, 2.356194F, -1.570796F, 0F);
      fFaceD = new ModelRenderer(this, -6, 0);
      fFaceD.addBox(0F, 0F, 0F, 6, 3, 0);
      fFaceD.setRotationPoint(-2F, 16F, -8F);
      fFaceD.setTextureSize(16, 16);
      fFaceD.mirror = true;
      setRotation(fFaceD, -0.7853982F, -1.570796F, 0F);
      fFaceL = new ModelRenderer(this, -6, 0);
      fFaceL.addBox(0F, 0F, 0F, 6, 3, 0);
      fFaceL.setRotationPoint(2F, 16F, -8F);
      fFaceL.setTextureSize(16, 16);
      fFaceL.mirror = true;
      setRotation(fFaceL, 0.7853982F, -1.570796F, 0F);
      lFaceB = new ModelRenderer(this, -6, 0);
      lFaceB.addBox(0F, 0F, 0F, 6, 3, 0);
      lFaceB.setRotationPoint(2F, 16F, 2F);
      lFaceB.setTextureSize(16, 16);
      lFaceB.mirror = true;
      setRotation(lFaceB, -2.356194F, 0F, 0F);
      lFaceU = new ModelRenderer(this, -6, 0);
      lFaceU.addBox(0F, 0F, 0F, 6, 3, 0);
      lFaceU.setRotationPoint(2F, 16F, -2F);
      lFaceU.setTextureSize(16, 16);
      lFaceU.mirror = true;
      setRotation(lFaceU, 2.356194F, 0F, 0F);
      lFaceD = new ModelRenderer(this, -6, 0);
      lFaceD.addBox(0F, 0F, 0F, 6, 3, 0);
      lFaceD.setRotationPoint(2F, 16F, 2F);
      lFaceD.setTextureSize(16, 16);
      lFaceD.mirror = true;
      setRotation(lFaceD, -0.7853982F, 0F, 0F);
      lFaceF = new ModelRenderer(this, -6, 0);
      lFaceF.addBox(0F, 0F, 0F, 6, 3, 0);
      lFaceF.setRotationPoint(2F, 16F, -2F);
      lFaceF.setTextureSize(16, 16);
      lFaceF.mirror = true;
      setRotation(lFaceF, 0.7853982F, -0.0069813F, 0F);
      rFaceB = new ModelRenderer(this, -6, 0);
      rFaceB.addBox(0F, 0F, 0F, 6, 3, 0);
      rFaceB.setRotationPoint(-8F, 16F, 2F);
      rFaceB.setTextureSize(16, 16);
      rFaceB.mirror = false;
      setRotation(rFaceB, -0.7853982F, 0F, 0F);
      rFaceU = new ModelRenderer(this, -6, 0);
      rFaceU.addBox(0F, 0F, 0F, 6, 3, 0);
      rFaceU.setRotationPoint(-8F, 14F, 0F);
      rFaceU.setTextureSize(16, 16);
      rFaceU.mirror = false;
      setRotation(rFaceU, 0.7853982F, 0F, 0F);
      rFaceD = new ModelRenderer(this, -6, 0);
      rFaceD.addBox(0F, 0F, 0F, 6, 3, 0);
      rFaceD.setRotationPoint(-8F, 18F, 0F);
      rFaceD.setTextureSize(16, 16);
      rFaceD.mirror = false;
      setRotation(rFaceD, -2.356194F, 0F, 0F);
      rFaceF = new ModelRenderer(this, -6, 0);
      rFaceF.addBox(0F, 0F, 0F, 6, 3, 0);
      rFaceF.setRotationPoint(-8F, 14F, 0F);
      rFaceF.setTextureSize(16, 16);
      rFaceF.mirror = false;
      setRotation(rFaceF, -0.7853982F, 0F, 0F);
      coreR = new ModelRenderer(this, 6, 0);
      coreR.addBox(0F, 0F, 0F, 4, 4, 0);
      coreR.setRotationPoint(-2F, 14F, 2F);
      coreR.setTextureSize(16, 16);
      coreR.mirror = true;
      setRotation(coreR, 0F, 1.570796F, 0F);
      coreF = new ModelRenderer(this, 6, 0);
      coreF.addBox(0F, 0F, 0F, 4, 4, 0);
      coreF.setRotationPoint(-2F, 14F, -2F);
      coreF.setTextureSize(16, 16);
      coreF.mirror = true;
      setRotation(coreF, 0F, 0F, 0F);
      coreL = new ModelRenderer(this, 6, 0);
      coreL.addBox(0F, 0F, 0F, 4, 4, 0);
      coreL.setRotationPoint(2F, 14F, -2F);
      coreL.setTextureSize(16, 16);
      coreL.mirror = true;
      setRotation(coreL, 0F, -1.570796F, 0F);
      coreD = new ModelRenderer(this, 6, 0);
      coreD.addBox(0F, 0F, 0F, 4, 4, 0);
      coreD.setRotationPoint(2F, 18F, 2F);
      coreD.setTextureSize(16, 16);
      coreD.mirror = true;
      setRotation(coreD, 1.570796F, -3.141593F, 0F);
      coreB = new ModelRenderer(this, 6, 0);
      coreB.addBox(0F, 0F, 0F, 4, 4, 0);
      coreB.setRotationPoint(2F, 14F, 2F);
      coreB.setTextureSize(16, 16);
      coreB.mirror = true;
      setRotation(coreB, 0F, -3.141593F, 0F);
      coreU = new ModelRenderer(this, 6, 0);
      coreU.addBox(0F, 0F, 0F, 4, 4, 0);
      coreU.setRotationPoint(2F, 14F, -2F);
      coreU.setTextureSize(16, 16);
      coreU.mirror = true;
      setRotation(coreU, -1.570796F, 3.141593F, 0F);
      dFaceB = new ModelRenderer(this, -6, 0);
      dFaceB.addBox(0F, 0F, 0F, 6, 3, 0);
      dFaceB.setRotationPoint(0F, 18F, 2F);
      dFaceB.setTextureSize(16, 16);
      dFaceB.mirror = false;
      setRotation(dFaceB, 0F, -2.356194F, 1.570796F);
      dFaceL = new ModelRenderer(this, -6, 0);
      dFaceL.addBox(0F, 0F, 0F, 6, 3, 0);
      dFaceL.setRotationPoint(2F, 18F, 0F);
      dFaceL.setTextureSize(16, 16);
      dFaceL.mirror = false;
      setRotation(dFaceL, 1.570796F, -2.356194F, 1.570796F);
      dFaceR = new ModelRenderer(this, -6, 0);
      dFaceR.addBox(0F, 0F, 0F, 6, 3, 0);
      dFaceR.setRotationPoint(-2F, 18F, 0F);
      dFaceR.setTextureSize(16, 16);
      dFaceR.mirror = false;
      setRotation(dFaceR, -1.570796F, -2.356194F, 1.570796F);
      dFaceF = new ModelRenderer(this, -6, 0);
      dFaceF.addBox(0F, 0F, 0F, 6, 3, 0);
      dFaceF.setRotationPoint(0F, 18F, -2F);
      dFaceF.setTextureSize(16, 16);
      dFaceF.mirror = false;
      setRotation(dFaceF, 3.141593F, -2.356194F, 1.570796F);
      uFaceB = new ModelRenderer(this, -6, 0);
      uFaceB.addBox(0F, 0F, 0F, 6, 3, 0);
      uFaceB.setRotationPoint(0F, 14F, 2F);
      uFaceB.setTextureSize(16, 16);
      uFaceB.mirror = true;
      setRotation(uFaceB, 0F, 0.7853982F, -1.570796F);
      uFaceL = new ModelRenderer(this, -6, 0);
      uFaceL.addBox(0F, 0F, 0F, 6, 3, 0);
      uFaceL.setRotationPoint(0F, 14F, -2F);
      uFaceL.setTextureSize(16, 16);
      uFaceL.mirror = true;
      setRotation(uFaceL, 1.570796F, 0.7853982F, -1.570796F);
      uFaceR = new ModelRenderer(this, -6, 0);
      uFaceR.addBox(0F, 0F, 0F, 6, 3, 0);
      uFaceR.setRotationPoint(0F, 14F, 2F);
      uFaceR.setTextureSize(16, 16);
      uFaceR.mirror = true;
      setRotation(uFaceR, -1.570796F, 0.7853982F, -1.570796F);
      uFaceF = new ModelRenderer(this, -6, 0);
      uFaceF.addBox(0F, 0F, 0F, 6, 3, 0);
      uFaceF.setRotationPoint(0F, 14F, -2F);
      uFaceF.setTextureSize(16, 16);
      uFaceF.mirror = true;
      setRotation(uFaceF, 3.141593F, 0.7853982F, -1.570796F);
      bFaceR = new ModelRenderer(this, -6, 0);
      bFaceR.addBox(0F, 0F, 0F, 6, 3, 0);
      bFaceR.setRotationPoint(-2F, 16F, 2F);
      bFaceR.setTextureSize(16, 16);
      bFaceR.mirror = false;
      setRotation(bFaceR, -2.356194F, -1.570796F, 0F);
      bFaceU = new ModelRenderer(this, -6, 0);
      bFaceU.addBox(0F, 0F, 0F, 6, 3, 0);
      bFaceU.setRotationPoint(2F, 16F, 2F);
      bFaceU.setTextureSize(16, 16);
      bFaceU.mirror = false;
      setRotation(bFaceU, 2.356194F, -1.570796F, 0F);
      bFaceD = new ModelRenderer(this, -6, 0);
      bFaceD.addBox(0F, 0F, 0F, 6, 3, 0);
      bFaceD.setRotationPoint(-2F, 16F, 2F);
      bFaceD.setTextureSize(16, 16);
      bFaceD.mirror = false;
      setRotation(bFaceD, -0.7853982F, -1.570796F, 0F);
      bFaceL = new ModelRenderer(this, -6, 0);
      bFaceL.addBox(0F, 0F, 0F, 6, 3, 0);
      bFaceL.setRotationPoint(2F, 16F, 2F);
      bFaceL.setTextureSize(16, 16);
      bFaceL.mirror = false;
      setRotation(bFaceL, 0.7853982F, -1.570796F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    //if connectedFront
    fFaceR.render(f5);
    fFaceU.render(f5);
    fFaceD.render(f5);
    fFaceL.render(f5);
    
  //if connectedLeft
    lFaceB.render(f5);
    lFaceU.render(f5);
    lFaceD.render(f5);
    lFaceF.render(f5);
    
  //if connectedRight
    rFaceB.render(f5);
    rFaceU.render(f5);
    rFaceD.render(f5);
    rFaceF.render(f5);
    
    //always Render (alternate for bridging on other cables)
    coreR.render(f5);
    coreF.render(f5);
    coreL.render(f5);
    coreU.render(f5);
    coreB.render(f5);
    coreU.render(f5);
    
  //if connectedDown
    dFaceB.render(f5);
    dFaceL.render(f5);
    dFaceR.render(f5);
    dFaceF.render(f5);
    
  //if connectedUp
    uFaceB.render(f5);
    uFaceL.render(f5);
    uFaceR.render(f5);
    uFaceF.render(f5);
    
  //if connectedBack
    bFaceR.render(f5);
    bFaceU.render(f5);
    bFaceD.render(f5);
    bFaceL.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}